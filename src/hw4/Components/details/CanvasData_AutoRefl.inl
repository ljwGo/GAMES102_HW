// This file is generated by Ubpa::USRefl::AutoRefl

#pragma once

#include <USRefl/USRefl.h>

template<>
struct Ubpa::USRefl::TypeInfo<ContinuousMode> :
    TypeInfoBase<ContinuousMode>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[15] = "ContinuousMode";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR("C0"), Type::C0},
        Field {TSTR("G1"), Type::G1},
        Field {TSTR("C1"), Type::C1},
        Field {TSTR("C2"), Type::C2},
    };
};

template<>
struct Ubpa::USRefl::TypeInfo<ControlPoint> :
    TypeInfoBase<ControlPoint>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[13] = "ControlPoint";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR("mode"), &Type::mode, AttrList {
            Attr {TSTR(UMeta::initializer), []()->ContinuousMode{ return C2; }},
        }},
        Field {TSTR("isSelect"), &Type::isSelect, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return false; }},
        }},
        Field {TSTR("hasMove"), &Type::hasMove, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return false; }},
        }},
        Field {TSTR("xmLeft"), &Type::xmLeft},
        Field {TSTR("xmRight"), &Type::xmRight},
        Field {TSTR("ymLeft"), &Type::ymLeft},
        Field {TSTR("ymRight"), &Type::ymRight},
        Field {TSTR("xdLeft"), &Type::xdLeft},
        Field {TSTR("xdRight"), &Type::xdRight},
        Field {TSTR("ydLeft"), &Type::ydLeft},
        Field {TSTR("ydRight"), &Type::ydRight},
        Field {TSTR("p1"), &Type::p1},
        Field {TSTR("p2"), &Type::p2},
    };
};

template<>
struct Ubpa::USRefl::TypeInfo<CanvasData> :
    TypeInfoBase<CanvasData>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[11] = "CanvasData";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR("xs"), &Type::xs},
        Field {TSTR("ys"), &Type::ys},
        Field {TSTR("ts"), &Type::ts},
        Field {TSTR("controls"), &Type::controls},
        Field {TSTR("enableCubicSplineFn"), &Type::enableCubicSplineFn, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("enableCurve"), &Type::enableCurve, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("addingPoint"), &Type::addingPoint, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("isDP1"), &Type::isDP1, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return false; }},
        }},
        Field {TSTR("movePoint"), &Type::movePoint, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { -1 }; }},
        }},
        Field {TSTR("moveDerivative"), &Type::moveDerivative, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { -1 }; }},
        }},
        Field {TSTR("paramMode"), &Type::paramMode, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 0 }; }},
        }},
        Field {TSTR("delta"), &Type::delta, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 1. }; }},
        }},
        Field {TSTR("tDelta"), &Type::tDelta, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 1. }; }},
        }},
        Field {TSTR("tInterval"), &Type::tInterval, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 30. }; }},
        }},
        Field {TSTR("derivativeMul"), &Type::derivativeMul, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 8. }; }},
        }},
        Field {TSTR("gizmoShowState"), &Type::gizmoShowState, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("enableDebug"), &Type::enableDebug, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("debugInfo"), &Type::debugInfo},
    };
};

